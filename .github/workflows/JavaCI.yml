name: Create Semantic Version Tags
on:
  push:
    branches:
      - main

jobs:
  create_tag:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install semver
        run: npm install --global semver

      - name: Determine current version
        id: version
        run: |
          VERSION=$(git describe --abbrev=0 --tags)
          echo "::set-output name=current_version::$VERSION"

      - name: Determine bump type
        id: bump_type
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $COMMIT_MSG =~ BREAKING|Breaking|breaking ]]; then
            echo "::set-output name=bump_type::major"
          elif [[ $COMMIT_MSG =~ FEAT|feat ]]; then
            echo "::set-output name=bump_type::minor"
          else
            echo "::set-output name=bump_type::patch"
          fi
      - name: Check values
        env:
          bump_type: ${{ steps.bump_type.outputs.bump_type }}
          currentver: ${{ steps.version.outputs.current_version }}
        run:
            echo "Bump type is $bump_type"
            echo "Current Version is $currentver"


      - name: Generate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          if [[ $BUMP_TYPE == "major" ]]; then
            NEW_VERSION=$(semver bump major "$CURRENT_VERSION")
          elif [[ $BUMP_TYPE == "minor" ]]; then
            NEW_VERSION=$(semver bump minor "$CURRENT_VERSION")
          else
            NEW_VERSION=$(semver bump patch "$CURRENT_VERSION")
          fi
          echo "::set-output name=new_version::$NEW_VERSION"
          echo $NEW_VERSION

      - name: Create tag
        run: |
          NEW_TAG="${{ steps.new_version.outputs.new_version }}"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
