name: Build-release
on:
  push:
    branches:
      - main

jobs:
  run-tests:
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout code
          uses: actions/checkout@v3 

        - name: Setup jdk
          uses: actions/setup-java@v3
          with:
              distribution: 'zulu' 
              java-version: '17'
        - name: Build and Publish war
          env:
            GITHUB_USERNAME: x-access-token
            GITHUB_TOKEN: ${{ secrets.PKG_TOKEN }}
          run: |
              mvn test
        
  create-tag:
    runs-on: ubuntu-latest
    needs: run-tests
    permissions: write-all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install semver
        run: npm install --global semver

      - name: Determine current version
        id: version
        run: |
          VERSION=$(git describe --abbrev=0 --tags)
          echo "::set-output name=current_version::$VERSION"

      - name: Determine bump type
        id: bump_type
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $COMMIT_MSG =~ BREAKING|Breaking|breaking ]]; then
            echo "::set-output name=bump_type::major"
          elif [[ $COMMIT_MSG =~ FEAT|feat ]]; then
            echo "::set-output name=bump_type::minor"
          else
            echo "::set-output name=bump_type::patch"
          fi
      - name: Generate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          if [[ $BUMP_TYPE == "major" ]]; then
            NEW_VERSION=$(semver -i major "$CURRENT_VERSION")
          elif [[ $BUMP_TYPE == "minor" ]]; then
            NEW_VERSION=$(semver -i minor "$CURRENT_VERSION")
          else
            NEW_VERSION=$(semver -i patch "$CURRENT_VERSION")
          fi
          echo "::set-output name=new_version::$NEW_VERSION"
          echo $NEW_VERSION

      - name: Create tag
        run: |
          NEW_TAG="${{ steps.new_version.outputs.new_version }}"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

    outputs: 
      tag: ${{ steps.new_version.outputs.new_version }}     

  build-app:
    runs-on: ubuntu-22.04
    needs: create
    env:
      tag: ${{ needs.release.outputs.tag}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 

      - name: Setup jdk
        uses: actions/setup-java@v3
        with:
            distribution: 'zulu' 
            java-version: '17'
      - name: Build and Publish war
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_TOKEN: ${{ secrets.PKG_TOKEN }}
        run: |
          mvn --settings settings.xml deploy 
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        env:
          tag: ${{ env.tag }}  
        run: |
          docker build . -t specialops/devopsgym:$tag
          docker push specialops/devopsgym:$tag
  
  # release:
  #   runs-on: ubuntu-latest
  #   needs: publish-image 
  #   permissions: write-all
  #   steps:     
  #   - name: Create release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ steps.new_version.outputs.new_version }}
  #       release_name: Release ${{ steps.new_version.outputs.new_version }}
  #       draft: false
  #       prerelease: false