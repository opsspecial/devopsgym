name: Build-release
on:
  push:
    branches:
      - main

jobs:
  build-publish:
    permissions: write-all
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # - name: Setup jdk
      #   uses: actions/setup-java@v3
      #   with:
      #       distribution: 'zulu' 
      #       java-version: '17'
      # - name: run tests
      #   run: |
      #       mvn test
      - name: Install semver
        run: npm install --global semver
      - name: Determine current version
        id: version
        run: |
          VERSION=$(git describe --abbrev=0 --tags)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
      - name: Determine bump type
        id: bump_type
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $COMMIT_MSG =~ BREAKING|Breaking|breaking|BREAK|break|Break ]]; then
            export bump_type=major 
          elif [[ $COMMIT_MSG =~ FEATURE|feature|FEAT|feat ]]; then
            export bump_type=minor 
          else
            export bump_type=patch 
          fi
          echo "bump_type for this commit is $bump_type"
          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT
      - name: Generate new version
        env:
          CURRENT_VERSION: "${{ steps.version.outputs.current_version }}" 
        id: new_version
        run: |
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          if [[ $BUMP_TYPE == "major" ]]; then
            NEW_VERSION=$(semver -i major "$CURRENT_VERSION")
          elif [[ $BUMP_TYPE == "minor" ]]; then
            NEW_VERSION=$(semver -i minor "$CURRENT_VERSION")
          else
            NEW_VERSION=$(semver -i patch "$CURRENT_VERSION")
          fi
          echo "NEW_TAG=$NEW_VERSION" >> $GITHUB_OUTPUT
      - name: Create tag
        env:
          NEW_TAG: ${{ steps.new_version.outputs.NEW_TAG }}
        run: |
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Setup jdk
        uses: actions/setup-java@v3
        with:
            distribution: 'zulu' 
            java-version: '17'
      - name: Build and Publish war
        run: |
          mvn clean package 
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        env:
          NEW_TAG: ${{ steps.new_version.outputs.NEW_TAG }}
        run: |
          docker build . -t specialops/devopsgym:$NEW_TAG
          docker push specialops/devopsgym:$NEW_TAG
      - name: Set image name
        id: set-image
        env:
          NEW_TAG: ${{ steps.new_version.outputs.NEW_TAG }}    
        run: |
          echo "IMAGE=specialops/devopsgym:$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Update Kubectl 
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
          IMAGE: ${{ steps.set-image.outputs.IMAGE }}
        with:
          args: set image deployment/main main-web=$IMAGE




