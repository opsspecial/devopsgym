name: Build & Publish
on:
 workflow_dispatch: 
 push:
   branches: 
     - main
   paths:
    - src/**
    - pom.xml

jobs:
  BuildApp:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 

      - name: Setup jdk
        uses: actions/setup-java@v3
        with:
            distribution: 'zulu' 
            java-version: '17'
      - name: Build 
        run: |
            mvn clean install
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker Image
        run: |
          docker build . -t specialops/devopsgym:$GITHUB_RUN_NUMBER
          docker push specialops/devopsgym:$GITHUB_RUN_NUMBER

  release:
      runs-on: ubuntu-latest
      permissions: write-all
      name: GITHUB_TOKEN
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0 # required for github-action-get-previous-tag
  
        - name: Get previous tag
          id: previoustag
          uses: 'WyriHaximus/github-action-get-previous-tag@v1'
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            fallback: 1.0.0  

        - name: Determine release version
          id: determine_version
          run: |
            COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})
            if [[ $COMMIT_MESSAGE == *"BREAKING"* ]]; then
              echo "::set-output name=version::major"
            elif [[ $COMMIT_MESSAGE == *"FEATURE"* ]]; then
              echo "::set-output name=version::minor"
            elif [[ $COMMIT_MESSAGE == *"PATCH"* || $COMMIT_MESSAGE == *"DEPENDENCY"* ]]; then
              echo "::set-output name=version::patch"
            else
              echo "::set-output name=version::none"
            fi
  
  
        - name: Generate Tag          
          if: steps.determine_version.outputs.version != 'none'
          run: |
            TAG_VERSION=$(echo ${{ github.ref }} | cut -d '/' -f 3)
            echo
            if [[ steps.determine_version.outputs.version == 'major' ]]; then
              NEW_VERSION=$(semver bump major $TAG_VERSION)
            elif [[ steps.determine_version.outputs.version == 'minor' ]]; then
              NEW_VERSION=$(semver bump minor $TAG_VERSION)
            else
              NEW_VERSION=$(semver bump patch $TAG_VERSION)
            fi
            echo "TAG=${{ github.ref }}/v${NEW_VERSION}" >> $GITHUB_ENV
            echo $TAG

        - name: Create release
          id: create_release_id
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.semver.outputs.patch }}
            release_name: Release ${{ steps.semver.outputs.patch }}